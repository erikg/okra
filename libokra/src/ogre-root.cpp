// ogre-root.cpp
//
// This file has been generated by the Okra Bindings Generator.
// You should not edit this file unless you know what you're doing.
// Any changes you've made directly to this file will not be retained
// when a new instance of this file is generated.
//
// author: Erik Winkels (aerique@xs4all.nl)
//
// See the LICENSE file in the Okra root directory for more info.
//
// This file was generated on: 2009-09-29 16:00:39.

#include "handwritten/okra.h"


// Prototypes

extern "C"
{
    void ogre_root_save_config (Root*);
    bool ogre_root_restore_config (Root*);
    bool ogre_root_show_config_dialog (Root*);
    void ogre_root_add_render_system (Root*, RenderSystem*);
    const char** ogre_root_get_available_renderers (Root*);
    RenderSystem* ogre_root_get_render_system_by_name (Root*, const char*);
    void ogre_root_set_render_system (Root*, RenderSystem*);
    RenderSystem* ogre_root_get_render_system (Root*);
    RenderWindow* ogre_root_initialise_bool_string_string (Root*, bool, const char*, const char*);
    bool ogre_root_is_initialised (Root*);
    void ogre_root_use_custom_render_system_capabilities (Root*, RenderSystemCapabilities*);
    void ogre_root_add_scene_manager_factory (Root*, SceneManagerFactory*);
    void ogre_root_remove_scene_manager_factory (Root*, SceneManagerFactory*);
    const SceneManagerMetaData* ogre_root_get_scene_manager_meta_data (Root*, const char*);
    SceneManagerEnumerator::MetaDataIterator ogre_root_get_scene_manager_meta_data_iterator (Root*);
    SceneManager* ogre_root_create_scene_manager_string_string (Root*, const char*, const char*);
    SceneManager* ogre_root_create_scene_manager_scenetypemask_string (Root*, uint16_t, const char*);
    void ogre_root_destroy_scene_manager (Root*, SceneManager*);
    SceneManager* ogre_root_get_scene_manager_string (Root*, const char*);
    SceneManagerEnumerator::SceneManagerIterator ogre_root_get_scene_manager_iterator (Root*);
    TextureManager* ogre_root_get_texture_manager (Root*);
    MeshManager* ogre_root_get_mesh_manager (Root*);
    const char* ogre_root_get_error_description (Root*, long);
    void ogre_root_add_frame_listener (Root*, FrameListener*);
    void ogre_root_remove_frame_listener (Root*, FrameListener*);
    void ogre_root_queue_end_rendering (Root*);
    void ogre_root_start_rendering (Root*);
    bool ogre_root_render_one_frame (Root*);
    void ogre_root_shutdown (Root*);
    void ogre_root_add_resource_location (Root*, const char*, const char*, const char*, bool);
    void ogre_root_remove_resource_location (Root*, const char*, const char*);
    void ogre_root_convert_colour_value (Root*, const okraArray4, uint32_t*);
    RenderWindow* ogre_root_get_auto_created_window (Root*);
    RenderWindow* ogre_root_create_render_window (Root*, const char*, unsigned int, unsigned int, bool, const NameValuePairList*);
    void ogre_root_detach_render_target_rendertarget (Root*, RenderTarget*);
    void ogre_root_detach_render_target_string (Root*, const char*);
    RenderTarget* ogre_root_get_render_target (Root*, const char*);
    void ogre_root_load_plugin (Root*, const char*);
    void ogre_root_unload_plugin (Root*, const char*);
    void ogre_root_install_plugin (Root*, Plugin*);
    void ogre_root_uninstall_plugin (Root*, Plugin*);
    const Root::PluginInstanceList& ogre_root_get_installed_plugins (Root*);
    Timer* ogre_root_get_timer (Root*);
    unsigned long ogre_root_get_next_frame_number (Root*);
    RenderQueueInvocationSequence* ogre_root_create_render_queue_invocation_sequence (Root*, const char*);
    RenderQueueInvocationSequence* ogre_root_get_render_queue_invocation_sequence (Root*, const char*);
    void ogre_root_destroy_render_queue_invocation_sequence (Root*, const char*);
    void ogre_root_destroy_all_render_queue_invocation_sequences (Root*);
    void ogre_root_clear_event_times (Root*);
    void ogre_root_set_frame_smoothing_period (Root*, Real);
    Real ogre_root_get_frame_smoothing_period (Root*);
    void ogre_root_add_movable_object_factory (Root*, MovableObjectFactory*, bool);
    void ogre_root_remove_movable_object_factory (Root*, MovableObjectFactory*);
    bool ogre_root_has_movable_object_factory (Root*, const char*);
    MovableObjectFactory* ogre_root_get_movable_object_factory (Root*, const char*);
    Root::MovableObjectFactoryIterator ogre_root_get_movable_object_factory_iterator (Root*);
}


// Functions

// name: "saveConfig"
// type: "void"
// args: "void"
//
void ogre_root_save_config (Root* ogre_root)
{
    ogre_root->saveConfig();
}

// name: "restoreConfig"
// type: "bool"
// args: "void"
//
bool ogre_root_restore_config (Root* ogre_root)
{
    return ogre_root->restoreConfig();
}

// name: "showConfigDialog"
// type: "bool"
// args: "void"
//
bool ogre_root_show_config_dialog (Root* ogre_root)
{
    return ogre_root->showConfigDialog();
}

// name: "addRenderSystem"
// type: "void"
// args: (("RenderSystem*" . "newRend"))
//
void ogre_root_add_render_system (Root* ogre_root, RenderSystem* newRend)
{
    ogre_root->addRenderSystem(newRend);
}

// name: "getAvailableRenderers"
// type: "RenderSystemList*"
// args: "void"
//
const char** ogre_root_get_available_renderers (Root* ogre_root)
{
    RenderSystemList* rsl = ogre_root->getAvailableRenderers();
    const char** list = new const char*[rsl->size()+1];

    String size = StringConverter::toString(rsl->size());
    list[0] = new char[size.length()];
    list[0] = size.c_str();

    for (size_t i = 0; i < rsl->size(); i++)
    {
        RenderSystem* rs = rsl->at(i);
        String name = rs->getName();
        list[i+1] = new char[name.length()];
        list[i+1] = name.c_str();
    }

    return list;
}

// name: "getRenderSystemByName"
// type: "RenderSystem*"
// args: (("const String&" . "name"))
//
RenderSystem* ogre_root_get_render_system_by_name (Root* ogre_root, const char* name)
{
    return ogre_root->getRenderSystemByName(name);
}

// name: "setRenderSystem"
// type: "void"
// args: (("RenderSystem*" . "system"))
//
void ogre_root_set_render_system (Root* ogre_root, RenderSystem* system)
{
    ogre_root->setRenderSystem(system);
}

// name: "getRenderSystem"
// type: "RenderSystem*"
// args: "void"
//
RenderSystem* ogre_root_get_render_system (Root* ogre_root)
{
    return ogre_root->getRenderSystem();
}

// name: "initialise"
// type: "RenderWindow*"
// args: (("bool" . "autoCreateWindow") ("const String&" . "windowTitle") ("const String&" . "customCapabilitiesConfig"))
//
RenderWindow* ogre_root_initialise_bool_string_string (Root* ogre_root, bool autoCreateWindow, const char* windowTitle, const char* customCapabilitiesConfig)
{
    return ogre_root->initialise(autoCreateWindow, windowTitle, customCapabilitiesConfig);
}

// name: "isInitialised"
// type: "bool"
// args: "void"
//
bool ogre_root_is_initialised (Root* ogre_root)
{
    return ogre_root->isInitialised();
}

// name: "useCustomRenderSystemCapabilities"
// type: "void"
// args: (("RenderSystemCapabilities*" . "capabilities"))
//
void ogre_root_use_custom_render_system_capabilities (Root* ogre_root, RenderSystemCapabilities* capabilities)
{
    ogre_root->useCustomRenderSystemCapabilities(capabilities);
}

// name: "addSceneManagerFactory"
// type: "void"
// args: (("SceneManagerFactory*" . "fact"))
//
void ogre_root_add_scene_manager_factory (Root* ogre_root, SceneManagerFactory* fact)
{
    ogre_root->addSceneManagerFactory(fact);
}

// name: "removeSceneManagerFactory"
// type: "void"
// args: (("SceneManagerFactory*" . "fact"))
//
void ogre_root_remove_scene_manager_factory (Root* ogre_root, SceneManagerFactory* fact)
{
    ogre_root->removeSceneManagerFactory(fact);
}

// name: "getSceneManagerMetaData"
// type: "const SceneManagerMetaData*"
// args: (("const String&" . "typeName"))
//
const SceneManagerMetaData* ogre_root_get_scene_manager_meta_data (Root* ogre_root, const char* typeName)
{
    return ogre_root->getSceneManagerMetaData(typeName);
}

// name: "getSceneManagerMetaDataIterator"
// type: "SceneManagerEnumerator::MetaDataIterator"
// args: "void"
//
SceneManagerEnumerator::MetaDataIterator ogre_root_get_scene_manager_meta_data_iterator (Root* ogre_root)
{
    return ogre_root->getSceneManagerMetaDataIterator();
}

// name: "createSceneManager"
// type: "SceneManager*"
// args: (("const String&" . "typeName") ("const String&" . "instanceName"))
//
SceneManager* ogre_root_create_scene_manager_string_string (Root* ogre_root, const char* typeName, const char* instanceName)
{
    return ogre_root->createSceneManager(typeName, instanceName);
}

// name: "createSceneManager"
// type: "SceneManager*"
// args: (("SceneTypeMask" . "typeMask") ("const String&" . "instanceName"))
//
SceneManager* ogre_root_create_scene_manager_scenetypemask_string (Root* ogre_root, uint16_t typeMask, const char* instanceName)
{
    return ogre_root->createSceneManager(typeMask, instanceName);
}

// name: "destroySceneManager"
// type: "void"
// args: (("SceneManager*" . "sm"))
//
void ogre_root_destroy_scene_manager (Root* ogre_root, SceneManager* sm)
{
    ogre_root->destroySceneManager(sm);
}

// name: "getSceneManager"
// type: "SceneManager*"
// args: (("const String&" . "instanceName"))
//
SceneManager* ogre_root_get_scene_manager_string (Root* ogre_root, const char* instanceName)
{
    return ogre_root->getSceneManager(instanceName);
}

// name: "getSceneManagerIterator"
// type: "SceneManagerEnumerator::SceneManagerIterator"
// args: "void"
//
SceneManagerEnumerator::SceneManagerIterator ogre_root_get_scene_manager_iterator (Root* ogre_root)
{
    return ogre_root->getSceneManagerIterator();
}

// name: "getTextureManager"
// type: "TextureManager*"
// args: "void"
//
TextureManager* ogre_root_get_texture_manager (Root* ogre_root)
{
    return ogre_root->getTextureManager();
}

// name: "getMeshManager"
// type: "MeshManager*"
// args: "void"
//
MeshManager* ogre_root_get_mesh_manager (Root* ogre_root)
{
    return ogre_root->getMeshManager();
}

// name: "getErrorDescription"
// type: "String"
// args: (("long" . "errorNumber"))
//
const char* ogre_root_get_error_description (Root* ogre_root, long errorNumber)
{
    return ogre_root->getErrorDescription(errorNumber).c_str();
}

// name: "addFrameListener"
// type: "void"
// args: (("FrameListener*" . "newListener"))
//
void ogre_root_add_frame_listener (Root* ogre_root, FrameListener* newListener)
{
    ogre_root->addFrameListener(newListener);
}

// name: "removeFrameListener"
// type: "void"
// args: (("FrameListener*" . "oldListener"))
//
void ogre_root_remove_frame_listener (Root* ogre_root, FrameListener* oldListener)
{
    ogre_root->removeFrameListener(oldListener);
}

// name: "queueEndRendering"
// type: "void"
// args: "void"
//
void ogre_root_queue_end_rendering (Root* ogre_root)
{
    ogre_root->queueEndRendering();
}

// name: "startRendering"
// type: "void"
// args: "void"
//
void ogre_root_start_rendering (Root* ogre_root)
{
    ogre_root->startRendering();
}

// name: "renderOneFrame"
// type: "bool"
// args: "void"
//
bool ogre_root_render_one_frame (Root* ogre_root)
{
    return ogre_root->renderOneFrame();
}

// name: "shutdown"
// type: "void"
// args: "void"
//
void ogre_root_shutdown (Root* ogre_root)
{
    ogre_root->shutdown();
}

// name: "addResourceLocation"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "locType") ("const String&" . "groupName") ("bool" . "recursive"))
//
void ogre_root_add_resource_location (Root* ogre_root, const char* name, const char* locType, const char* groupName, bool recursive)
{
    ogre_root->addResourceLocation(name, locType, groupName, recursive);
}

// name: "removeResourceLocation"
// type: "void"
// args: (("const String&" . "name") ("const String&" . "groupName"))
//
void ogre_root_remove_resource_location (Root* ogre_root, const char* name, const char* groupName)
{
    ogre_root->removeResourceLocation(name, groupName);
}

// name: "convertColourValue"
// type: "void"
// args: (("const ColourValue&" . "colour") ("uint32_t*" . "pDest"))
//
void ogre_root_convert_colour_value (Root* ogre_root, const okraArray4 colour, uint32_t* pDest)
{
    ColourValue ogre_colour = ColourValue(colour[0], colour[1], colour[2], colour[3]);
    ogre_root->convertColourValue(ogre_colour, pDest);
}

// name: "getAutoCreatedWindow"
// type: "RenderWindow*"
// args: "void"
//
RenderWindow* ogre_root_get_auto_created_window (Root* ogre_root)
{
    return ogre_root->getAutoCreatedWindow();
}

// name: "createRenderWindow"
// type: "RenderWindow*"
// args: (("const String&" . "name") ("unsigned int" . "width") ("unsigned int" . "height") ("bool" . "fullScreen") ("const NameValuePairList*" . "miscParams"))
//
RenderWindow* ogre_root_create_render_window (Root* ogre_root, const char* name, unsigned int width, unsigned int height, bool fullScreen, const NameValuePairList* miscParams)
{
    return ogre_root->createRenderWindow(name, width, height, fullScreen, miscParams);
}

// name: "detachRenderTarget"
// type: "void"
// args: (("RenderTarget*" . "pWin"))
//
void ogre_root_detach_render_target_rendertarget (Root* ogre_root, RenderTarget* pWin)
{
    ogre_root->detachRenderTarget(pWin);
}

// name: "detachRenderTarget"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_root_detach_render_target_string (Root* ogre_root, const char* name)
{
    ogre_root->detachRenderTarget(name);
}

// name: "getRenderTarget"
// type: "RenderTarget*"
// args: (("const String&" . "name"))
//
RenderTarget* ogre_root_get_render_target (Root* ogre_root, const char* name)
{
    return ogre_root->getRenderTarget(name);
}

// name: "loadPlugin"
// type: "void"
// args: (("const String&" . "pluginName"))
//
void ogre_root_load_plugin (Root* ogre_root, const char* pluginName)
{
    ogre_root->loadPlugin(pluginName);
}

// name: "unloadPlugin"
// type: "void"
// args: (("const String&" . "pluginName"))
//
void ogre_root_unload_plugin (Root* ogre_root, const char* pluginName)
{
    ogre_root->unloadPlugin(pluginName);
}

// name: "installPlugin"
// type: "void"
// args: (("Plugin*" . "plugin"))
//
void ogre_root_install_plugin (Root* ogre_root, Plugin* plugin)
{
    ogre_root->installPlugin(plugin);
}

// name: "uninstallPlugin"
// type: "void"
// args: (("Plugin*" . "plugin"))
//
void ogre_root_uninstall_plugin (Root* ogre_root, Plugin* plugin)
{
    ogre_root->uninstallPlugin(plugin);
}

// name: "getInstalledPlugins"
// type: "const PluginInstanceList&"
// args: "void"
//
const Root::PluginInstanceList& ogre_root_get_installed_plugins (Root* ogre_root)
{
    return ogre_root->getInstalledPlugins();
}

// name: "getTimer"
// type: "Timer*"
// args: "void"
//
Timer* ogre_root_get_timer (Root* ogre_root)
{
    return ogre_root->getTimer();
}

// name: "getNextFrameNumber"
// type: "unsigned long"
// args: "void"
//
unsigned long ogre_root_get_next_frame_number (Root* ogre_root)
{
    return ogre_root->getNextFrameNumber();
}

// name: "createRenderQueueInvocationSequence"
// type: "RenderQueueInvocationSequence*"
// args: (("const String&" . "name"))
//
RenderQueueInvocationSequence* ogre_root_create_render_queue_invocation_sequence (Root* ogre_root, const char* name)
{
    return ogre_root->createRenderQueueInvocationSequence(name);
}

// name: "getRenderQueueInvocationSequence"
// type: "RenderQueueInvocationSequence*"
// args: (("const String&" . "name"))
//
RenderQueueInvocationSequence* ogre_root_get_render_queue_invocation_sequence (Root* ogre_root, const char* name)
{
    return ogre_root->getRenderQueueInvocationSequence(name);
}

// name: "destroyRenderQueueInvocationSequence"
// type: "void"
// args: (("const String&" . "name"))
//
void ogre_root_destroy_render_queue_invocation_sequence (Root* ogre_root, const char* name)
{
    ogre_root->destroyRenderQueueInvocationSequence(name);
}

// name: "destroyAllRenderQueueInvocationSequences"
// type: "void"
// args: "void"
//
void ogre_root_destroy_all_render_queue_invocation_sequences (Root* ogre_root)
{
    ogre_root->destroyAllRenderQueueInvocationSequences();
}

// name: "clearEventTimes"
// type: "void"
// args: "void"
//
void ogre_root_clear_event_times (Root* ogre_root)
{
    ogre_root->clearEventTimes();
}

// name: "setFrameSmoothingPeriod"
// type: "void"
// args: (("Real" . "period"))
//
void ogre_root_set_frame_smoothing_period (Root* ogre_root, Real period)
{
    ogre_root->setFrameSmoothingPeriod(period);
}

// name: "getFrameSmoothingPeriod"
// type: "Real"
// args: "void"
//
Real ogre_root_get_frame_smoothing_period (Root* ogre_root)
{
    return ogre_root->getFrameSmoothingPeriod();
}

// name: "addMovableObjectFactory"
// type: "void"
// args: (("MovableObjectFactory*" . "fact") ("bool" . "overrideExisting"))
//
void ogre_root_add_movable_object_factory (Root* ogre_root, MovableObjectFactory* fact, bool overrideExisting)
{
    ogre_root->addMovableObjectFactory(fact, overrideExisting);
}

// name: "removeMovableObjectFactory"
// type: "void"
// args: (("MovableObjectFactory*" . "fact"))
//
void ogre_root_remove_movable_object_factory (Root* ogre_root, MovableObjectFactory* fact)
{
    ogre_root->removeMovableObjectFactory(fact);
}

// name: "hasMovableObjectFactory"
// type: "bool"
// args: (("const String&" . "typeName"))
//
bool ogre_root_has_movable_object_factory (Root* ogre_root, const char* typeName)
{
    return ogre_root->hasMovableObjectFactory(typeName);
}

// name: "getMovableObjectFactory"
// type: "MovableObjectFactory*"
// args: (("const String&" . "typeName"))
//
MovableObjectFactory* ogre_root_get_movable_object_factory (Root* ogre_root, const char* typeName)
{
    return ogre_root->getMovableObjectFactory(typeName);
}

// name: "getMovableObjectFactoryIterator"
// type: "MovableObjectFactoryIterator"
// args: "void"
//
Root::MovableObjectFactoryIterator ogre_root_get_movable_object_factory_iterator (Root* ogre_root)
{
    return ogre_root->getMovableObjectFactoryIterator();
}


